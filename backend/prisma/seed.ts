import {
  PrismaClient,
  UserRole,
  ContentFormat,
  DataStructureContentType,
  DataStructureDifficulty,
  QuizDifficulty,
  QuizQuestionType,
} from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();
const roundsOfHashing = 10;

async function main() {
  console.log('üå±  Seeding la base de datos...');

  const passwordAdmin = await bcrypt.hash('admin123', roundsOfHashing);
  const passwordTeacher = await bcrypt.hash('teacher123', roundsOfHashing);
  const passwordStudent = await bcrypt.hash('student123', roundsOfHashing);

  const admin = await prisma.user.upsert({
    where: { email: 'admin@datodo.com' },
    update: { password: passwordAdmin },
    create: {
      email: 'admin@datodo.com',
      password: passwordAdmin,
      role: UserRole.admin,
      name: 'Admin',
      username: 'adminuser',
    },
  });

  const teacher = await prisma.user.upsert({
    where: { email: 'teacher@datodo.com' },
    update: { password: passwordTeacher },
    create: {
      email: 'teacher@datodo.com',
      password: passwordTeacher,
      role: UserRole.teacher,
      name: 'Teacher',
      username: 'teacheruser',
    },
  });

  const student = await prisma.user.upsert({
    where: { email: 'student@datodo.com' },
    update: { password: passwordStudent },
    create: {
      email: 'student@datodo.com',
      password: passwordStudent,
      role: UserRole.student,
      name: 'Student',
      username: 'studentuser',
    },
  });

  const queue = await prisma.dataStructure.upsert({
    where: { slug: 'colas' },
    update: {},
    create: {
      title: 'Colas',
      slug: 'colas',
      description: 'Estructura lineal con principio FIFO: Primero en entrar, primero en salir',
      difficulty: DataStructureDifficulty.principiante,
      creator: { connect: { id: admin.id } },
      contents: {
        create: [
          {
            contentType: DataStructureContentType.general,
            format: ContentFormat.text,
            name: 'Definici√≥n de Cola',
            description:
              'Una cola (queue) es una estructura de datos lineal que sigue el principio FIFO (First In, First Out ‚Äì Primero en entrar, Primero en salir), donde el primer elemento en entrar es el primero en salir.',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Enqueue',
            format: ContentFormat.text,
            description:
              'Agrega un elemento al final de la cola. Complejidad: O(1)'
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Dequeue',
            format: ContentFormat.text,
            description:
              'Elimina y retorna el elemento del frente de la cola. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Peek',
            format: ContentFormat.text,
            description:
              'Retorna el elemento del frente sin eliminarlo. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'IsEmpty',
            format: ContentFormat.text,
            description: 'Verifica si la cola est√° vac√≠a. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Size',
            format: ContentFormat.text,
            description:
              'Retorna el n√∫mero de elementos en la cola. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Sistemas de impresi√≥n',
            description:
              'Las colas se usan para gestionar trabajos de impresi√≥n en orden de llegada.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'B√∫squeda en anchura (BFS)',
            description:
              'El algoritmo BFS utiliza una cola para recorrer grafos o √°rboles por niveles.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Simulaciones de colas',
            description:
              'Modelado de l√≠neas de espera en bancos, supermercados, etc.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Gesti√≥n de tareas',
            description: 'Procesamiento de tareas en orden de llegada.',
          },
          {
            contentType: DataStructureContentType.resource,
            format: ContentFormat.link,
            name: 'Visualizaci√≥n USFCA',
            description:
              'https://www.cs.usfca.edu/~galles/visualization/QueueArray.html',
          },
          {
            contentType: DataStructureContentType.resource,
            format: ContentFormat.link,
            name: 'VisuAlgo Queue',
            description: 'https://visualgo.net/en/list',
          },
          {
            contentType: DataStructureContentType.resource,
            format: ContentFormat.video,
            name: 'Video explicativo',
            description: 'https://youtu.be/D6gu-_tmEpQ?si=TJTe4rOtM__qtViL',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Linear Structure',
            format: ContentFormat.text,
            description:
              'Una cola es una estructura de datos lineal donde los elementos se procesan en orden FIFO (First-In, First-Out).',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Dynamic Size',
            format: ContentFormat.text,
            description:
              'El tama√±o de la cola puede crecer o decrecer din√°micamente seg√∫n las operaciones de inserci√≥n y eliminaci√≥n.',
          },
        ],
      },
      quizzes: {
        create: {
          title: 'Cuestionario de Colas',
          description: 'Eval√∫a tu comprensi√≥n sobre colas',
          difficulty: QuizDifficulty.principiante,
          creator: { connect: { id: teacher.id } },
          questions: {
            create: [
              {
                questionText:
                  '¬øQu√© significa que una cola siga el principio FIFO?',
                questionType: QuizQuestionType.multiple_choice,
                order: 1,
                options: {
                  create: [
                    {
                      optionText: 'El primero en entrar es el primero en salir',
                      isCorrect: true,
                      order: 1,
                    },
                    {
                      optionText: 'El √∫ltimo en entrar es el primero en salir',
                      isCorrect: false,
                      order: 2,
                    },
                    {
                      optionText: 'Todos los elementos entran y salen a la vez',
                      isCorrect: false,
                      order: 3,
                    },
                    {
                      optionText: 'El elemento m√°s grande sale primero',
                      isCorrect: false,
                      order: 4,
                    },
                  ],
                },
              },
              {
                questionText:
                  '¬øCu√°l es la operaci√≥n que agrega un elemento a la cola?',
                questionType: QuizQuestionType.multiple_choice,
                order: 2,
                options: {
                  create: [
                    { optionText: 'pop()', isCorrect: false, order: 1 },
                    { optionText: 'enqueue()', isCorrect: true, order: 2 },
                    { optionText: 'insert()', isCorrect: false, order: 3 },
                    { optionText: 'push()', isCorrect: false, order: 4 },
                  ],
                },
              },
              {
                questionText:
                  '¬øCu√°l de las siguientes colas permite inserci√≥n y eliminaci√≥n en ambos extremos?',
                questionType: QuizQuestionType.multiple_choice,
                order: 3,
                options: {
                  create: [
                    { optionText: 'Cola circular', isCorrect: false, order: 1 },
                    {
                      optionText: 'Cola de prioridad',
                      isCorrect: false,
                      order: 2,
                    },
                    { optionText: 'Deque', isCorrect: true, order: 3 },
                    { optionText: 'Cola simple', isCorrect: false, order: 4 },
                  ],
                },
              },
              {
                questionText:
                  '¬øQu√© representa mejor el funcionamiento de una cola simple?',
                questionType: QuizQuestionType.multiple_choice,
                order: 4,
                options: {
                  create: [
                    {
                      optionText: 'Cola en una tienda',
                      isCorrect: true,
                      order: 1,
                    },
                    {
                      optionText: 'Torre de platos',
                      isCorrect: false,
                      order: 2,
                    },
                    {
                      optionText: 'Historial del navegador',
                      isCorrect: false,
                      order: 3,
                    },
                    { optionText: '√Årbol binario', isCorrect: false, order: 4 },
                  ],
                },
              },
            ],
          },
        },
      },
    },
  });

  const pilas = await prisma.dataStructure.upsert({
    where: { slug: 'pilas' },
    update: {},
    create: {
      title: 'Pilas',
      slug: 'pilas',
      description: 'Estructura LIFO: √öltimo en entrar, primero en salir.',
      difficulty: DataStructureDifficulty.principiante,
      creator: { connect: { id: teacher.id } },
      contents: {
        create: [
          {
            contentType: DataStructureContentType.general,
            name: 'Definici√≥n de Pila',
            format: ContentFormat.text,
            description:
              'Una pila es una estructura de datos que sigue el principio LIFO  ',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Push',
            format: ContentFormat.text,
            description:
              'Agrega un elemento en la parte superior de la pila. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Pop',
            format: ContentFormat.text,
            description:
              'Elimina y retorna el elemento de la parte superior de la pila. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Peek',
            format: ContentFormat.text,
            description:
              'Retorna el elemento de la parte superior sin eliminarlo. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'IsEmpty',
            format: ContentFormat.text,
            description: 'Verifica si la pila est√° vac√≠a. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Size',
            format: ContentFormat.text,
            description:
              'Retorna el n√∫mero de elementos en la pila. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Deshacer/rehacer en editores',
            description:
              'Las pilas permiten implementar funcionalidades de deshacer y rehacer en aplicaciones.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Evaluaci√≥n de expresiones',
            description:
              'Las pilas se usan para evaluar expresiones matem√°ticas y convertir notaciones.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Navegadores web (historial)',
            description:
              'El historial de navegaci√≥n se gestiona como una pila.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Llamadas a funciones (call stack)',
            description:
              'El call stack de un programa es una pila de llamadas a funciones.',
          },
          {
            contentType: DataStructureContentType.resource,
            name: 'VisuAlgo Stack',
            format: ContentFormat.link,
            description: 'https://visualgo.net/en/list',
          },
          {
            contentType: DataStructureContentType.resource,
            name: 'Video explicativo',
            format: ContentFormat.video,
            description: 'https://youtu.be/lhhyE7NVcbg?si=pB0rQSBIIHaEiruv',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Linear Structure',
            format: ContentFormat.text,
            description:
              'Una pila es una estructura de datos lineal que sigue el principio LIFO (Last-In, First-Out).',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Dynamic Size',
            format: ContentFormat.text,
            description:
              'El tama√±o de la pila puede crecer o decrecer din√°micamente seg√∫n las operaciones de inserci√≥n y eliminaci√≥n.',
          }
        ],
      },
      quizzes: {
        create: {
          title: 'Cuestionario de Pilas',
          description: 'Eval√∫a tu comprensi√≥n sobre pilas',
          difficulty: QuizDifficulty.principiante,
          creator: { connect: { id: teacher.id } },
          questions: {
            create: [
              {
                questionText:
                  '¬øQu√© significa que una pila siga el principio LIFO?',
                questionType: QuizQuestionType.multiple_choice,
                order: 1,
                options: {
                  create: [
                    {
                      optionText: '√öltimo en entrar es el primero en salir',
                      isCorrect: true,
                      order: 1,
                    },
                    {
                      optionText: 'Primero en entrar es el primero en salir',
                      isCorrect: false,
                      order: 2,
                    },
                    {
                      optionText: 'Todos los elementos salen al mismo tiempo',
                      isCorrect: false,
                      order: 3,
                    },
                    {
                      optionText: 'Se insertan en cualquier posici√≥n',
                      isCorrect: false,
                      order: 4,
                    },
                  ],
                },
              },
              {
                questionText:
                  '¬øCu√°l es la operaci√≥n que elimina el √∫ltimo elemento agregado en una pila?',
                questionType: QuizQuestionType.multiple_choice,
                order: 2,
                options: {
                  create: [
                    { optionText: 'enqueue()', isCorrect: false, order: 1 },
                    { optionText: 'pop()', isCorrect: true, order: 2 },
                    { optionText: 'peek()', isCorrect: false, order: 3 },
                    { optionText: 'shift()', isCorrect: false, order: 4 },
                  ],
                },
              },
              {
                questionText:
                  '¬øQu√© estructura del mundo real representa mejor una pila?',
                questionType: QuizQuestionType.multiple_choice,
                order: 3,
                options: {
                  create: [
                    {
                      optionText: 'Cola en una tienda',
                      isCorrect: false,
                      order: 1,
                    },
                    { optionText: 'Pila de platos', isCorrect: true, order: 2 },
                    {
                      optionText: 'Cinta transportadora',
                      isCorrect: false,
                      order: 3,
                    },
                    {
                      optionText: 'Calendario de eventos',
                      isCorrect: false,
                      order: 4,
                    },
                  ],
                },
              },
              {
                questionText:
                  '¬øQu√© operaci√≥n te permite ver el √∫ltimo elemento agregado sin eliminarlo?',
                questionType: QuizQuestionType.multiple_choice,
                order: 4,
                options: {
                  create: [
                    { optionText: 'peek()', isCorrect: true, order: 1 },
                    { optionText: 'pop()', isCorrect: false, order: 2 },
                    { optionText: 'push()', isCorrect: false, order: 3 },
                    { optionText: 'top()', isCorrect: false, order: 4 },
                  ],
                },
              },
            ],
          },
        },
      },
    },
  });

  const listaEnlazadaSimple = await prisma.dataStructure.upsert({
    where: { slug: 'lista-enlazada-simple' },
    update: {},
    create: {
      title: 'Lista Enlazada Simple',
      slug: 'lista-enlazada-simple',
      description:
        'Estructura de datos lineal donde cada elemento apunta al siguiente.',
      difficulty: DataStructureDifficulty.principiante,
      creator: { connect: { id: teacher.id } },
      contents: {
        create: [
          {
            contentType: DataStructureContentType.general,
            name: 'Definici√≥n de Lista Enlazada Simple',
            format: ContentFormat.text,
            description:
              'Una lista enlazada simple es una estructura de datos lineal donde cada elemento (nodo) contiene datos y una referencia al siguiente nodo. El √∫ltimo nodo apunta a NULL.',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Insert',
            format: ContentFormat.text,
            description:
              'Inserta un nuevo nodo en la lista. Complejidad: O(1) para inserci√≥n al inicio, O(n) para inserci√≥n al final',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Delete',
            format: ContentFormat.text,
            description:
              'Elimina un nodo de la lista. Complejidad: O(1) para eliminaci√≥n al inicio, O(n) para eliminaci√≥n al final',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Search',
            format: ContentFormat.text,
            description: 'Busca un elemento en la lista. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Traverse',
            format: ContentFormat.text,
            description:
              'Recorre todos los elementos de la lista. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Size',
            format: ContentFormat.text,
            description:
              'Retorna el n√∫mero de nodos en la lista. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Implementaci√≥n de otras estructuras',
            description:
              'Listas enlazadas se usan para implementar pilas, colas y tablas hash.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Navegadores (p√°ginas adelante/atr√°s)',
            description:
              'Permiten navegar hacia adelante y atr√°s en el historial.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Gesti√≥n de memoria',
            description: 'Listas libres y asignaci√≥n din√°mica de memoria.',
          },
          {
            contentType: DataStructureContentType.resource,
            name: 'VisuAlgo Linked List',
            format: ContentFormat.link,
            description: 'https://visualgo.net/en/list',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Dynamic Structure',
            format: ContentFormat.text,
            description:
              'Una lista enlazada simple es una estructura de datos din√°mica donde cada elemento apunta al siguiente.',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Efficient Insert/Delete',
            format: ContentFormat.text,
            description:
              'Permite inserciones y eliminaciones eficientes en cualquier posici√≥n, especialmente al inicio.',
          },
        ],
      },
    },
  });

  const listaEnlazaDoble = await prisma.dataStructure.upsert({
    where: { slug: 'lista-enlazada-doble' },
    update: {},
    create: {
      title: 'Lista Enlazada Doble',
      slug: 'lista-enlazada-doble',
      description:
        'Estructura de datos lineal donde cada elemento apunta al anterior y al siguiente.',
      difficulty: DataStructureDifficulty.intermedio,
      creator: { connect: { id: teacher.id } },
      contents: {
        create: [
          {
            contentType: DataStructureContentType.general,
            name: 'Definici√≥n de Lista Enlazada Doble',
            format: ContentFormat.text,
            description:
              'Una lista enlazada doble es una estructura de datos lineal donde cada nodo contiene datos, una referencia al nodo anterior y una referencia al nodo siguiente. Permite navegaci√≥n en ambas direcciones.',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Insert',
            format: ContentFormat.text,
            description:
              'Inserta un nuevo nodo en la lista. Complejidad: O(1) para inserci√≥n al inicio/final, O(n) para inserci√≥n en posici√≥n espec√≠fica',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Delete',
            format: ContentFormat.text,
            description:
              'Elimina un nodo de la lista. Complejidad: O(1) si se conoce la posici√≥n, O(n) para b√∫squeda',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Search',
            format: ContentFormat.text,
            description: 'Busca un elemento en la lista. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Traverse Forward',
            format: ContentFormat.text,
            description:
              'Recorre todos los elementos de la lista hacia adelante. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Traverse Backward',
            format: ContentFormat.text,
            description:
              'Recorre todos los elementos de la lista hacia atr√°s. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Size',
            format: ContentFormat.text,
            description:
              'Retorna el n√∫mero de nodos en la lista. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Navegadores web',
            description: 'Historial de navegaci√≥n con botones adelante/atr√°s.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Editores de texto',
            description: 'Deshacer y rehacer operaciones.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Reproductores multimedia',
            description: 'Listas de reproducci√≥n con navegaci√≥n bidireccional.',
          },
          {
            contentType: DataStructureContentType.resource,
            name: 'VisuAlgo Doubly Linked List',
            format: ContentFormat.link,
            description: 'https://visualgo.net/en/list?slide=1',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Bidirectional Navigation',
            format: ContentFormat.text,
            description:
              'Permite navegar hacia adelante y hacia atr√°s en la lista de manera eficiente.',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Efficient Deletion',
            format: ContentFormat.text,
            description:
              'Eliminaci√≥n m√°s eficiente ya que no necesitamos mantener un puntero al nodo anterior.',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Memory Overhead',
            format: ContentFormat.text,
            description:
              'Requiere m√°s memoria por nodo debido a los punteros adicionales.',
          },
        ],
      },
    },
  });

  const listaEnlazadaCircular = await prisma.dataStructure.upsert({
    where: { slug: 'lista-enlazada-circular' },
    update: {},
    create: {
      title: 'Lista Enlazada Circular',
      slug: 'lista-enlazada-circular',
      description:
        'Estructura de datos donde el √∫ltimo elemento apunta al primero, formando un c√≠rculo.',
      difficulty: DataStructureDifficulty.intermedio,
      creator: { connect: { id: teacher.id } },
      contents: {
        create: [
          {
            contentType: DataStructureContentType.general,
            name: 'Definici√≥n de Lista Enlazada Circular',
            format: ContentFormat.text,
            description:
              'Una lista enlazada circular es una estructura de datos donde el √∫ltimo nodo apunta al primer nodo, formando un c√≠rculo. No hay un nodo final que apunte a NULL.',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Insert',
            format: ContentFormat.text,
            description:
              'Inserta un nuevo nodo en la lista. Complejidad: O(1) para inserci√≥n al inicio, O(n) para inserci√≥n al final',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Delete',
            format: ContentFormat.text,
            description:
              'Elimina un nodo de la lista. Complejidad: O(1) para eliminaci√≥n al inicio, O(n) para eliminaci√≥n al final',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Search',
            format: ContentFormat.text,
            description: 'Busca un elemento en la lista. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Traverse',
            format: ContentFormat.text,
            description:
              'Recorre todos los elementos de la lista. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'Size',
            format: ContentFormat.text,
            description:
              'Retorna el n√∫mero de nodos en la lista. Complejidad: O(n)',
          },
          {
            contentType: DataStructureContentType.operation,
            name: 'IsCircular',
            format: ContentFormat.text,
            description: 'Verifica si la lista es circular. Complejidad: O(1)',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Sistemas operativos',
            description: 'Planificaci√≥n de procesos con round-robin.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Juegos',
            description: 'Turnos de jugadores en juegos de mesa.',
          },
          {
            contentType: DataStructureContentType.application,
            format: ContentFormat.text,
            name: 'Reproductores de m√∫sica',
            description: 'Reproducci√≥n en bucle de listas de canciones.',
          },
          {
            contentType: DataStructureContentType.resource,
            name: 'VisuAlgo Circular Linked List',
            format: ContentFormat.link,
            description: 'https://visualgo.net/en/list?slide=2',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'No End Point',
            format: ContentFormat.text,
            description:
              'No hay un nodo final que apunte a NULL, todos los nodos est√°n conectados en un c√≠rculo.',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Efficient Traversal',
            format: ContentFormat.text,
            description:
              'Permite recorrer la lista infinitamente sin necesidad de reiniciar.',
          },
          {
            contentType: DataStructureContentType.property,
            name: 'Memory Efficiency',
            format: ContentFormat.text,
            description:
              'No se necesita un puntero especial para el final de la lista.',
          },
        ],
      },
    },
  });

  console.log('üå± Seeding completado');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
